/*
 * Display driver template file.
 * 
 * Copy this file to a new file Brand_Model_X.h and edit that file for your display board.
 *
 * @file Brand_template_X.h
 *
 * change the Brand_template_X above to your file name.
 *
 */


/*
 * Libraries used by your display board.
 *
 * these are only an example modify as necessary.
 * 
 */

#define LGFX_USE_V1
#include <LovyanGFX.hpp>
#include <lgfx/v1/platforms/esp32s3/Panel_RGB.hpp>
#include <lgfx/v1/platforms/esp32s3/Bus_RGB.hpp>
#include <driver/i2c.h>

/*
 * defines need for your board.
 * 
 * The LCD_H_RES and LCD_V_RES are required by the main source.
 * However you may add any more defines that you require after them.
 * 
 */

#define LCD_H_RES 480
#define LCD_V_RES 800


/*
 * The class declaration for the board.
 *
 * If you are using a different library to LovyanGFX for you will need to change this.
 * 
 * The cfg items below are for a Elecrow DIS02170A 7inch 800x480 Advanced display board.
 * 
 */

class LGFX : public lgfx::LGFX_Device {
public:

  lgfx::Bus_RGB _bus_instance;
  lgfx::Panel_RGB _panel_instance;
  lgfx::Touch_GT911 _touch_instance;

  LGFX(void) {
    {
      auto cfg = _panel_instance.config();

      cfg.memory_width = 800;
      cfg.memory_height = 480;
      cfg.panel_width = 800;
      cfg.panel_height = 480;

      cfg.offset_x = 0;
      cfg.offset_y = 0;

      _panel_instance.config(cfg);
    }

    {
      auto cfg = _panel_instance.config_detail();

      cfg.use_psram = 1;

      _panel_instance.config_detail(cfg);
    }

    {
      auto cfg = _bus_instance.config();
      cfg.panel = &_panel_instance;
      cfg.pin_d0 = GPIO_NUM_21;    // B0
      cfg.pin_d1 = GPIO_NUM_47;    // B1
      cfg.pin_d2 = GPIO_NUM_48;   // B2
      cfg.pin_d3 = GPIO_NUM_45;    // B3
      cfg.pin_d4 = GPIO_NUM_38;    // B4
      cfg.pin_d5 = GPIO_NUM_9;    // G0
      cfg.pin_d6 = GPIO_NUM_10;    // G1
      cfg.pin_d7 = GPIO_NUM_11;    // G2
      cfg.pin_d8 = GPIO_NUM_12;   // G3
      cfg.pin_d9 = GPIO_NUM_13;   // G4
      cfg.pin_d10 = GPIO_NUM_14;   // G5
      cfg.pin_d11 = GPIO_NUM_7;  // R0
      cfg.pin_d12 = GPIO_NUM_17;  // R1
      cfg.pin_d13 = GPIO_NUM_18;  // R2
      cfg.pin_d14 = GPIO_NUM_3;  // R3
      cfg.pin_d15 = GPIO_NUM_46;  // R4

      cfg.pin_henable = GPIO_NUM_42;
      cfg.pin_vsync = GPIO_NUM_41;
      cfg.pin_hsync = GPIO_NUM_40;
      cfg.pin_pclk = GPIO_NUM_39;
//      cfg.freq_write = 21000000;
      cfg.freq_write = 16000000;
      //cfg.freq_write = 13990000;
      //cfg.freq_write = 14000000;

      cfg.hsync_polarity = 0;
      cfg.hsync_front_porch = 8;
      cfg.hsync_pulse_width = 4;
      cfg.hsync_back_porch = 8;
      cfg.vsync_polarity = 0;
      cfg.vsync_front_porch = 8;
      cfg.vsync_pulse_width = 4;
      cfg.vsync_back_porch = 8;
      cfg.pclk_idle_high = 1;

      _bus_instance.config(cfg);
    }
    _panel_instance.setBus(&_bus_instance);



    {
      auto cfg = _touch_instance.config();
#ifdef EEZ
      cfg.x_min = 800;
      cfg.x_max = 0;
      cfg.y_min = 480;
      cfg.y_max = 0;
      cfg.offset_rotation = 2;
#else
      cfg.x_min = 0;
//      cfg.x_min = 480;
//      cfg.x_max = 480;
      cfg.x_max = 800;

      cfg.y_min = 0;
//      cfg.y_min = 800;
      cfg.y_max = 480;
//      cfg.y_max = 800;
#endif

      cfg.pin_int = -1;
      cfg.bus_shared = false;
//      cfg.offset_rotation = 0;
//      cfg.offset_rotation = 1;
//      cfg.offset_rotation = 3;
      cfg.i2c_port = I2C_NUM_0;
      cfg.pin_sda = GPIO_NUM_15;
      cfg.pin_scl = GPIO_NUM_16;
      cfg.pin_rst = -1;
      cfg.freq = 400000;
      cfg.i2c_addr = 0x5D;  // 0x5D , 0x14
      _touch_instance.config(cfg);
      _panel_instance.setTouch(&_touch_instance);
    }

    setPanel(&_panel_instance);
  }
};


//#ifndef EEZ
LGFX gfx;
//#endif

/*
 * Enter the method to control the screen brightness here.
 *
 */

void setBacklight()
 {

 }

/*
 * Enter any additional hardware setup methods here.
 *
 */


void initHardware()
 {

 }

